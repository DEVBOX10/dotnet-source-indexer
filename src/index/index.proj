<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" InitialTargets="EnsurePreconditions" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" TreatAsLocalProperty="WhatIf">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />
  <PropertyGroup>
    <WhatIf Condition="'$(WhatIf)' != 'true'">false</WhatIf>
  </PropertyGroup>
  <Import Project="$(MSBuildThisFileDirectory)repositories.props" />

  <ItemGroup>
    <OverwriteFiles Include="$(MSBuildThisFileDirectory)/overwrite/**/*"/>
  </ItemGroup>

  <ItemDefinitionGroup>
    <Repository>
      <Branch>master</Branch>
      <LocalPath>$(RepositoryPath)%(Identity)/</LocalPath>
      <ServerPath>%(Url)/tree/%(Branch)/</ServerPath>
    </Repository>
  </ItemDefinitionGroup>

  <Target Name="EnsurePreconditions">
    <Error Condition="'$(OS)' != 'Windows_NT'" Text="This tool can only be run on Windows_NT."/>
  </Target>

  <Target Name="Clean">
    <RemoveDir Directories="$(OutDir)"/>
  </Target>

  <Target Name="PrepareOutput">
    <MakeDir Condition="!Exists('$(OutDir)')" Directories="$(OutDir)"/>
    <MakeDir Condition="!Exists('$(RepositoryPath)')" Directories="$(RepositoryPath)"/>
  </Target>

  <Target Name="CloneRepository" Outputs="%(Repository.Identity)">
    <PropertyGroup>
      <CloneSparse>false</CloneSparse>
      <CloneSparse Condition="'%(Repository.SparseCheckout)' != ''">true</CloneSparse>
      <CloneExists>false</CloneExists>
      <CloneExists Condition="Exists('%(Repository.LocalPath)')">true</CloneExists>
      <CheckoutSubmodules>false</CheckoutSubmodules>
      <CheckoutSubmodules Condition="'$(Repository.CheckoutSubmodules)' == 'true'">true</CheckoutSubmodules>
    </PropertyGroup>
    <MakeDir Condition="!$(CloneExists)"
             Directories="%(Repository.LocalPath)"/>
    <Exec Condition="!$(CloneExists)"
          Command="git init"
          WorkingDirectory="%(Repository.LocalPath)" />
    <Exec Condition="!$(CloneExists) AND $(CloneSparse)"
          Command="git config core.sparsecheckout true"
          WorkingDirectory="%(Repository.LocalPath)" />
    <WriteLinesToFile
          Condition="!$(CloneExists) AND $(CloneSparse)"
          File="$([MSBuild]::NormalizePath('%(Repository.LocalPath)', '.git/info/sparse-checkout'))"
          Lines="%(Repository.SparseCheckout)"/>
    <Exec Condition="!$(CloneExists)"
          Command="git remote add origin %(Repository.Url).git"
          WorkingDirectory="%(Repository.LocalPath)" />
    <Exec Condition="!$(CloneExists)"
          Command="git pull origin %(Repository.Branch)"
          WorkingDirectory="%(Repository.LocalPath)" />
    <Exec Condition="!$(CloneExists) AND $(CheckoutSubmodules)"
          Command="git submodule update --init --recursive"
          WorkingDirectory="%(Repository.LocalPath)" />
  </Target>

  <Target Name="CheckoutSources" DependsOnTargets="CloneRepository" Outputs="%(Repository.Identity)">
    <Exec Command="git checkout %(Repository.OldCommit)" WorkingDirectory="%(Repository.LocalPath)" Condition="'%(Repository.OldCommit)' != ''" />
    <Exec Command="git checkout HEAD" WorkingDirectory="%(Repository.LocalPath)" Condition="'%(Repository.OldCommit)' == ''" />

    <Exec Command="git rev-parse HEAD 2>&amp;1" WorkingDirectory="%(Repository.LocalPath)" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="CommitHash"/>
    </Exec>
    <ItemGroup>
      <ClonedRepository Include="@(Repository)">
        <ServerPath>%(Url)/tree/$(CommitHash)/</ServerPath>
      </ClonedRepository>
    </ItemGroup>
  </Target>

  <Target Name="Clone" DependsOnTargets="CloneRepository;CheckoutSources">
  </Target>

  <Target Name="Prepare" DependsOnTargets="Clone" Outputs="%(ClonedRepository.Identity)">
    <PropertyGroup>
      <PrepareCommand>$([System.String]::Copy('%(ClonedRepository.PrepareCommand)').Trim())</PrepareCommand>
    </PropertyGroup>
    <Message Importance="High" Text="Preparing Repository %(ClonedRepository.Identity)"/>
    <Exec Command="cmd /c &quot;$(PrepareCommand)&quot;" WorkingDirectory="%(ClonedRepository.LocalPath)" ContinueOnError="true" IgnoreStandardErrorWarningFormat="true" LogStandardErrorAsError="false" IgnoreExitCode="true"/>
  </Target>

  <Target Name="FindBinlogs" Outputs="%(ClonedRepository.Identity)">
    <ItemGroup>
      <BinlogToIndex Include="%(ClonedRepository.LocalPath)\**\*.binlog"/>
    </ItemGroup>
  </Target>

  <Target Name="BuildGenerator" Condition="!Exists('$(HtmlGeneratorExePath)')">
    <MSBuild Projects="$(SourcesDir)SourceBrowser/src/HtmlGenerator/HtmlGenerator.csproj" Targets="Restore;Build" Properties="SolutionDir=$(SourcesDir)SourceBrowser">
      <Output TaskParameter="TargetOutputs" PropertyName="HtmlGeneratorExePath"/>
    </MSBuild>
  </Target>

  <Target Name="Build" DependsOnTargets="BuildGenerator;Prepare;FindBinlogs">
    <Error Condition="!Exists('$(HtmlGeneratorExePath)')" Text="Html generator executable not found."/>
    <RemoveDuplicates Inputs="@(BinlogToIndex)">
      <Output TaskParameter="Filtered" ItemName="_FilteredBinlog"/>
    </RemoveDuplicates>
    <RemoveDir Directories="$(OutDir)index/"/>
    <WriteLinesToFile Lines="@(_FilteredBinlog -> '%(FullPath)')" File="$(OutDir)index.list" Overwrite="true"/>
    <PropertyGroup>
      <SourceIndexCmd>"$(HtmlGeneratorExePath)"</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd) /donotincludereferencedprojects</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd) /nobuiltinfederations</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd) /noplugins</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd) /out:"$(OutDir)index/"</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd) /in:"$(OutDir)index.list"</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd)@(ClonedRepository -> ' /serverPath:"%(LocalPath)=%(ServerPath)"', '')</SourceIndexCmd>
    </PropertyGroup>
    <Exec Command="$(SourceIndexCmd)" LogStandardErrorAsError="false"/>
    <Copy SourceFiles="@(OverwriteFiles)" DestinationFiles="@(OverwriteFiles -> '$(OutDir)index/%(RecursiveDir)%(Filename)%(Extension)')"/>
  </Target>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build"/>
</Project>
